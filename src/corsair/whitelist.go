package main

import (
	"bufio"
	"bytes"
	"database/sql"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"regexp"
	"strings"
	"sync"
	"time"

	"github.com/codegangsta/cli"
	"github.com/elazarl/go-bindata-assetfs"
	"github.com/elazarl/goproxy"
	"github.com/gorilla/mux"
	lru "github.com/hashicorp/golang-lru"
)

var (
	siteRegex    []*regexp.Regexp
	cache        *lru.Cache
	lock         sync.Mutex
	lastReadTime time.Time
)

type WhitelistEntry struct {
	Id          int
	Domain      string
	LastAccess  time.Time
	AccessCount int64
	IsAllowed   bool
	WhitelistId sql.NullInt64
}

// Main entry point for the "proxy" subcommand.  Read the file
// and stores entries into the database.  Configures the
// proxy and serves until asked to quit.
func whitelist(c *cli.Context) {
	if len(c.Args()) < 1 {
		log.Fatalf("Whitelist requires a file of hostnames to match")
	}
	configureLogging(c)
	proxy := goproxy.NewProxyHttpServer()
	proxy.Verbose = c.GlobalBool("verbose")

	filename := c.Args().First()
	siteRegex = make([]*regexp.Regexp, 0)
	cache, _ = lru.New(1000)

	// Read the configuration file every 5 seconds, constructing the
	// siteRegex structure.
	go func() {
		for {
			content, err := ioutil.ReadFile(filename)
			if err != nil {
				log.Print("Could not open file: %v -- %v", filename, err)
			}
			lines := strings.Split(string(content), "\n")
			lock.Lock()
			siteRegex = siteRegex[0:0]
			lastReadTime = time.Now()
			for idx, line := range lines {
				r, err := regexp.Compile(line)
				if err != nil {
					log.Print("Could not compile %v on line %v: %v", line, idx, err)
				}
				if line != "" {
					siteRegex = append(siteRegex, r)
					insertRegex(line)
				}
			}
			lock.Unlock()
			time.Sleep(10 * time.Second)
			return
		}
	}()

	// Purge old entries every 10 minutes
	purgeCache()

	// Checks the host to determine if it is black listed.
	// Returns true if so, false if it is on the whitelist.
	var isBlacklist goproxy.ReqConditionFunc = func(req *http.Request, ctx *goproxy.ProxyCtx) bool {
		// logger.Info("Got request for %v", req.URL)
		entry := checkHost(req.Host)
		// logger.Info("Request for %v was %v", req.URL, entry.IsAllowed)
		return !entry.IsAllowed
	}
	var AlwaysAccept goproxy.FuncHttpsHandler = func(host string, ctx *goproxy.ProxyCtx) (*goproxy.ConnectAction, string) {
		return goproxy.OkConnect, host
	}

	proxy.OnRequest(goproxy.IsLocalHost).HandleConnect(AlwaysAccept)
	// 	func(host string, ctx *goproxy.ProxyCtx) (*goproxy.ConnectAction, string) {
	// 	return goproxy.OkConnect, host
	// })
	// 	func(r *http.Response, ctx *goproxy.ProxyCtx) *http.Response {
	// 	return r
	// })

	// Configure the proxy to check the isBlacklist
	// function on each request, returning the request
	// and a goproxy.NewResponse with text generated by printCache(r).
	proxy.OnRequest(isBlacklist).DoFunc(
		func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
			return r, goproxy.NewResponse(r,
				goproxy.ContentTypeText, http.StatusForbidden,
				printCache(r))
		})

	// If the site is on the black list, then reject it.
	// proxy.OnRequest(isBlacklist).HandleConnect(goproxy.AlwaysReject)
	proxy.OnRequest(isBlacklist).HijackConnect(func(r *http.Request, client net.Conn, ctx *goproxy.ProxyCtx) {
		clientBuf := bufio.NewReadWriter(bufio.NewReader(client), bufio.NewWriter(client))
		req, err := http.ReadRequest(clientBuf.Reader)
		if err != nil {
			logger.Info("Error %v", err)
		}
		logger.Info("HijackConnect for req: %v", req)
		count, _ := client.Write([]byte("got here"))
		logger.Info("Wrote %v bytes", count)
		client.Close()
	})

	// Serve the assets and proxy
	p := fmt.Sprintf(":%d", c.Int("control"))
	h := http.NewServeMux()
	mux := mux.NewRouter()
	mux.NotFoundHandler = &FourOhFourHandler{}
	sub := mux.PathPrefix("/rest").Subrouter()
	registerRest(sub)

	// Assets
	fs := http.FileServer(&assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: "assets"})
	mux.PathPrefix("/").Handler(fs)

	h.Handle("/", mux)
	// http.Handle("/", mux)
	_ = mux
	go http.ListenAndServe(p, h)

	logger.Info("Started server on %v", p)
	p = fmt.Sprintf(":%d", c.Int("port"))
	logger.Info("Started proxy on %v", p)
	http.ListenAndServe(p, proxy)
}

func printCache(r *http.Request) string {
	var buffer bytes.Buffer
	buffer.WriteString(fmt.Sprintf("The requested URL (%v) is not in the whitelist\n", r.URL))
	// buffer.WriteString(fmt.Sprintf("\nThe accepted domains are (last read %v):\n", lastReadTime))
	// for _, exp := range siteRegex {
	// 	buffer.WriteString(fmt.Sprintf("\t%v\n", exp))
	// }
	// buffer.WriteString(fmt.Sprintf("\nThe cache contains the following entries:\n"))

	// table := tablewriter.NewWriter(&buffer)
	// table.SetHeader([]string{"Site", "Count", "Date", "IsAllowed"})
	// // buffer.WriteString(fmt.Sprintf("%v\t%v\t%v\t%v\n", entry.Domain, entry.AccessCount, entry.LastAccess, entry.IsAllowed))
	// table.Render()
	return buffer.String()

}

func reportCache(w http.ResponseWriter, req *http.Request) {
	fmt.Fprintf(w, printCache(req))
}

type FourOhFourHandler struct {
}

func (self *FourOhFourHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	http.Error(w, fmt.Sprintf("could not find match for %v\n", req.URL), http.StatusNotFound)
}
